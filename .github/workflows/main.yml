name: Run Selenium Automation

on:
  workflow_dispatch:  # Allows manual triggering

jobs:
  run-automation:
    runs-on: windows-latest  # Ensures it runs on Windows with UI support

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          pip install selenium openpyxl pyautogui

      - name: Check if Chrome is installed
        id: check-chrome
        shell: powershell
        run: |
          $chromePaths = @(
            "C:\Program Files\Google\Chrome\Application\chrome.exe",
            "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"
          )
          $chromePath = $chromePaths | Where-Object { Test-Path $_ } | Select-Object -First 1
          
          if ($chromePath) {
              Write-Host "‚úÖ Chrome found at: $chromePath"
              echo "chrome_found=true" >> $env:GITHUB_ENV
          } else {
              Write-Host "‚ùå Chrome not found. Installing..."
              echo "chrome_found=false" >> $env:GITHUB_ENV
          }

      - name: Install Chrome (if missing)
        if: env.chrome_found == 'false'
        run: |
          choco install googlechrome -y
          Write-Host "‚úÖ Chrome installed successfully."

      - name: Detect Chrome Version and Download ChromeDriver
        shell: powershell
        run: |
          Start-Sleep -s 5  # Ensure installation completes
          
          # Retry Chrome detection up to 3 times
          $maxAttempts = 3
          $attempt = 0
          $chromeVersion = $null

          while ($attempt -lt $maxAttempts -and -not $chromeVersion) {
              $chromePaths = @(
                "C:\Program Files\Google\Chrome\Application\chrome.exe",
                "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"
              )
              $chromePath = $chromePaths | Where-Object { Test-Path $_ } | Select-Object -First 1

              if ($chromePath) {
                  $chromeVersion = (Get-Item $chromePath).VersionInfo.ProductVersion
                  if ($chromeVersion) { break }  # Exit loop if version is found
              }
              
              Start-Sleep -s 3  # Wait before retrying
              $attempt++
          }

          if (-not $chromeVersion) {
              Write-Host "‚ùå Failed to detect Chrome version. Exiting."
              exit 1
          }

          Write-Host "‚úÖ Chrome Version Found: $chromeVersion"
          $chromeMajorVersion = $chromeVersion.Split('.')[0]
          Write-Host "üîç Chrome Major Version: $chromeMajorVersion"

          # Download the latest ChromeDriver matching the detected Chrome version
          $latestVersionUrl = "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$chromeMajorVersion"
          Invoke-WebRequest -Uri $latestVersionUrl -OutFile latest_version.txt
          $latestVersion = Get-Content latest_version.txt
          Write-Host "üì• Downloading ChromeDriver Version: $latestVersion"
          
          Invoke-WebRequest -Uri "https://chromedriver.storage.googleapis.com/$latestVersion/chromedriver-win64.zip" -OutFile chromedriver.zip
          Expand-Archive -Path chromedriver.zip -DestinationPath .
          
          echo "$(pwd)/chromedriver-win64" | Out-File -Append -Encoding utf8 $env:GITHUB_PATH

      - name: Verify ChromeDriver Installation
        run: |
          ./chromedriver-win64/chromedriver.exe --version

      - name: Run Selenium Script (Non-Headless Mode)
        run: python script.py
